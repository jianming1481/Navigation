#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Twist.h"
#include "gazebo_msgs/ModelStates.h"
#include "tf/transform_datatypes.h"

typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;
ros::Time cur_time;
ros::Time pre_time;
void model_states_CB(const gazebo_msgs::ModelStates::ConstPtr& msg)
{
  int model_num = msg->name.size();
  geometry_msgs::Pose Ball_pose;
  geometry_msgs::Pose R_pose;

  for(int i=0;i<model_num;i++)
  {
    if(msg->name[i]=="My Ball")
    {
      Ball_pose = msg->pose[i];
    }

    if(msg->name[i]=="omni_robot")
    {
      R_pose = msg->pose[i];
    }
  }
  cur_time = ros::Time::now();
  if((cur_time.toSec()-pre_time.toSec())>1)
  {
    printf("%f\n",(cur_time.toSec()-pre_time.toSec()));
    pre_time = cur_time;
  }

}


int main(int argc, char** argv){
  ros::init(argc, argv, "simple_navigation_goals");

  ros::NodeHandle n;
  ros::Subscriber velocity_sub = n.subscribe("/gazebo/model_states",100,model_states_CB);
  //tell the action client that we want to spin a thread by default
  // MoveBaseClient ac("move_base", true);
  //
  // //wait for the action server to come up
  // while(!ac.waitForServer(ros::Duration(5.0))){
  //   ROS_INFO("Waiting for the move_base action server to come up");
  // }
  //
  // move_base_msgs::MoveBaseGoal goal;
  //
  // //we'll send a goal to the robot to move 1 meter forward
  // goal.target_pose.header.frame_id = "scanner_base";
  // goal.target_pose.header.stamp = ros::Time::now();
  //
  // goal.target_pose.pose.position.x = 1.0;
  // goal.target_pose.pose.orientation.w = 1.0;
  //
  // ROS_INFO("Sending goal");
  // ac.sendGoal(goal);
  //
  // ac.waitForResult();
  //
  // if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
  //   ROS_INFO("Hooray, the base moved 1 meter forward");
  // else
  //   ROS_INFO("The base failed to move forward 1 meter for some reason");
  ros::spin();

  return 0;
}

